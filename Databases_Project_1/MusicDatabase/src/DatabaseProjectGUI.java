/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DatabaseProjectGUI.java
 *
 * Created on Sep 22, 2011, 11:00:51 PM
 */
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import java.io.*;
/**
 *
 * @author May
 */
public class DatabaseProjectGUI extends javax.swing.JFrame {

	
	Parser parse;
    DAO dao;
    ArtistDAO artistDAO;
    Views view;
    Statistics stat;
    String [] songHeaders = new String [] {"Title", "Year on Billboard", "Position on Billboard", "Features Multiple Artists"};
    String [] artistHeaders = new String [] {"Name", "Debut Year", "Is a Group", "State", "Country"};
    String [] fileHeaders = new String [] {"Size in Bytes", "Length in Seconds", "Description Artist-Song-Year"};
    String [] songArtistHeaders = new String [] {"Song Rank-Year", "Artist Name"};
    String [] songFileHeaders = new String [] {"Song Rank-Year", "File Description Artist-Song-Year"};
    
    /** Creates new form DatabaseProjectGUI */
    public DatabaseProjectGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	dao = new DAO();
    	File libraryFile = new File("library.db");
    	if(!libraryFile.exists()){
//    		System.out.println("aa");
    		dao.populateDatabase();
    	}
    	else
//    		System.out.println("bb");

    		parse = new Parser();
    		view = new Views();
    	artistDAO = new ArtistDAO();
    	
    	stat = new Statistics();
    	
    	
        TablesTabs = new javax.swing.JTabbedPane();
        MainPanel = new javax.swing.JPanel();
        ResultsScrollPane = new javax.swing.JScrollPane();
        ResultsTable = new javax.swing.JTable();
        QueryScrollPane = new javax.swing.JScrollPane();
        QueryText = new javax.swing.JTextArea();
        QuerySubmitButton = new javax.swing.JButton();
        SongTitleLabel = new javax.swing.JLabel();
        YearBillboardLabel = new javax.swing.JLabel();
        PositionBillboardLabel = new javax.swing.JLabel();
        FeaturesArtistsLabel = new javax.swing.JLabel();
        ArtistNameLabel = new javax.swing.JLabel();
        ArtistDebutYearLabel = new javax.swing.JLabel();
        ArtistGroupLabel = new javax.swing.JLabel();
        SizeSongLabel = new javax.swing.JLabel();
        LengthSongLabel = new javax.swing.JLabel();
        SongTitleText = new javax.swing.JTextField();
        YearBillboardText = new javax.swing.JTextField();
        PositionBillboardText = new javax.swing.JTextField();
        ArtistNameText = new javax.swing.JTextField();
        ArtistDebutYearText = new javax.swing.JTextField();
        SizeSongText = new javax.swing.JTextField();
        LengthSongText = new javax.swing.JTextField();
        FeaturesArtistsCheckBox = new javax.swing.JCheckBox();
        ArtistGroupCheckBox = new javax.swing.JCheckBox();
        ArtistStateLabel = new javax.swing.JLabel();
        ArtistStateText = new javax.swing.JTextField();
        ArtistCountryLabel = new javax.swing.JLabel();
        ArtistCountryText = new javax.swing.JTextField();
        AddEntryButton = new javax.swing.JButton();
        DeleteSongButton = new JButton();
        DeleteArtistButton = new JButton();
        DeleteFileButton = new JButton();
        ExportButton = new javax.swing.JButton();
        ImportButton = new javax.swing.JButton();
        UpdateStatisticsButton = new javax.swing.JButton();
        SongsPanel = new javax.swing.JPanel();
        SongsScrollPane = new javax.swing.JScrollPane();
        SongsTable = new javax.swing.JTable();
        PercentFeaturingMultipleArtistsLabel = new javax.swing.JLabel();
        PercentFeaturingMultipleArtistsText = new javax.swing.JTextField();
        ArtistsPanel = new javax.swing.JPanel();
        ArtistsScrollPane = new javax.swing.JScrollPane();
        ArtistsTable = new javax.swing.JTable();
        PercentArtistsGroupText = new javax.swing.JTextField();
        PercentArtistGroupLabel = new javax.swing.JLabel();
        FilesPanel = new javax.swing.JPanel();
        FilesScrollPane = new javax.swing.JScrollPane();
        FilesTable = new javax.swing.JTable();
        AverageSizeFilesText = new javax.swing.JTextField();
        AverageSizeFilesLabel = new javax.swing.JLabel();
        AverageLengthFilesText = new javax.swing.JTextField();
        AverageLengthFilesLabel = new javax.swing.JLabel();
        SongArtistPanel = new javax.swing.JPanel();
        SongArtistScrollPane = new javax.swing.JScrollPane();
        SongArtistTable = new javax.swing.JTable();
        SongFilePanel = new javax.swing.JPanel();
        SongFileScrollPane = new javax.swing.JScrollPane();
        SongFileTable = new javax.swing.JTable();
        ArtistsViewScrollPane = new javax.swing.JScrollPane();
        ArtistsViewList = new javax.swing.JList();
        ArtistsViewLabel = new javax.swing.JLabel();
        DebutYearViewScrollPane = new javax.swing.JScrollPane();
        DebutYearViewList = new javax.swing.JList();
        DebutYearViewLabel = new javax.swing.JLabel();
        CountryViewLabel = new javax.swing.JLabel();
        CountryViewScrollPane = new javax.swing.JScrollPane();
        CountryViewList = new javax.swing.JList();
        StateViewScrollPane = new javax.swing.JScrollPane();
        StateViewList = new javax.swing.JList();
        StateViewLabel = new javax.swing.JLabel();
        ArtistsViewButton = new javax.swing.JButton();
        DebutYearViewButton = new javax.swing.JButton();
        CountryViewButton = new javax.swing.JButton();
        StateViewButton = new javax.swing.JButton();
        CSVScrollPane = new javax.swing.JScrollPane();
        CSVTextArea = new javax.swing.JTextArea();

        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music Fun");
        setResizable(false);

        ResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title", "Year on Billboard", "Position on Billboard", "Features Multiple Artists"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ResultsScrollPane.setViewportView(ResultsTable);

        QueryText.setColumns(20);
        QueryText.setRows(5);
        QueryScrollPane.setViewportView(QueryText);

        QuerySubmitButton.setText("Submit");
        QuerySubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuerySubmitButtonActionPerformed(evt);
            }
        });

        SongTitleLabel.setText("Song Title:");

        YearBillboardLabel.setText("Year on Billboard:");

        PositionBillboardLabel.setText("Position on Billboard:");

        FeaturesArtistsLabel.setText("Features Mutiple Artists:");

        ArtistNameLabel.setText("Artist Name:");

        ArtistDebutYearLabel.setText("Artist Debut Year:");

        ArtistGroupLabel.setText("Is Artist a Group:");

        SizeSongLabel.setText("Size of Song File in Bytes:");

        LengthSongLabel.setText("Length of Song File in Seconds:");

        SongTitleText.setText("");
        SongTitleText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SongTitleTextActionPerformed(evt);
            }
        });

        YearBillboardText.setText("");

        PositionBillboardText.setText("");

        ArtistNameText.setText("");

        ArtistDebutYearText.setText("");

        SizeSongText.setText("");

        LengthSongText.setText("");

        FeaturesArtistsCheckBox.setText("Yes");

        ArtistGroupCheckBox.setText("Yes");
        
        ArtistStateText.setText("");
        
        ArtistCountryText.setText("");
        
        ArtistStateLabel.setText("Artist's State of Origin:");
        
        ArtistCountryLabel.setText("Artist's Country of Origin:");

        AddEntryButton.setText("Add Entry");
        AddEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEntryButtonActionPerformed(evt);
            }
        });

        DeleteSongButton.setText("Delete Song");
        DeleteSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteSongButtonActionPerformed(evt);
            }
        });
        
        DeleteFileButton.setText("Delete File");
        DeleteFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteFileButtonActionPerformed(evt);
            }
        });
        
        DeleteArtistButton.setText("Delete Artist");
        DeleteArtistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteArtistButtonActionPerformed(evt);
            }
        });
        
        
        ExportButton.setText("Export");
        ExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportButtonActionPerformed(evt);
            }
        });
        ImportButton.setText("Import");
        ImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportButtonActionPerformed(evt);
            }
        });

        UpdateStatisticsButton.setText("Update All Statistics");
        UpdateStatisticsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	UpdateStatisticsButtonActionPerformed(evt);
            }
        });
        updateTables();
        
        ArtistsViewList.setModel(artistNameListModel);
        ArtistsViewList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        ArtistsViewScrollPane.setViewportView(ArtistsViewList);

        ArtistsViewLabel.setText("Artists");

        DebutYearViewList.setModel(artistDebutYearListModel);
        DebutYearViewList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        DebutYearViewScrollPane.setViewportView(DebutYearViewList);

        DebutYearViewLabel.setText("Debut Year");

        CountryViewLabel.setText("Country");


        
        CountryViewList.setModel(artistCountryListModel);
        CountryViewList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        CountryViewScrollPane.setViewportView(CountryViewList);

        StateViewList.setModel(artistStateListModel);
        StateViewList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        StateViewScrollPane.setViewportView(StateViewList);

        StateViewLabel.setText("State");

        ArtistsViewButton.setText("Show Songs");
        ArtistsViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	ArtistsViewButtonActionPerformed(evt);
            }
        });

        DebutYearViewButton.setText("Show Artists");
        DebutYearViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	DebutYearViewButtonActionPerformed(evt);
            }
        });

        CountryViewButton.setText("Show Artists");
        CountryViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	CountryViewButtonActionPerformed(evt);
            }
        });

        StateViewButton.setText("Show Artists");
        StateViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	StateViewButtonActionPerformed(evt);
            }
        });

        CSVTextArea.setColumns(20);
        CSVTextArea.setRows(5);
        CSVScrollPane.setViewportView(CSVTextArea);
        
        
        
        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                    		 .addComponent(ArtistNameLabel)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistDebutYearLabel)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistDebutYearText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistGroupLabel)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistGroupCheckBox)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistStateLabel)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistStateText, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistCountryLabel)
                             .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                             .addComponent(ArtistCountryText, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(SizeSongLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SizeSongText, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LengthSongLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LengthSongText, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                        .addGap(479, 479, 479))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainPanelLayout.createSequentialGroup()
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                            .addComponent(ResultsScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
//                            .addGroup(MainPanelLayout.createSequentialGroup()
//                                .addComponent(QueryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 931, Short.MAX_VALUE)
//                                .addGap(10, 10, 10)
//                                .addComponent(QuerySubmitButton))
                        		.addGroup(MainPanelLayout.createSequentialGroup()
                                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ArtistsViewLabel)
                                            .addComponent(ArtistsViewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ArtistsViewButton))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(DebutYearViewLabel)
                                            .addComponent(DebutYearViewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DebutYearViewButton))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(CountryViewLabel)
                                            .addComponent(CountryViewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CountryViewButton))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(StateViewButton)
                                            .addComponent(StateViewLabel)
                                            .addComponent(StateViewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(CSVScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MainPanelLayout.createSequentialGroup()
                                .addComponent(ImportButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ExportButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MainPanelLayout.createSequentialGroup()
                                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AddEntryButton)
                                    .addGroup(MainPanelLayout.createSequentialGroup()
                                        .addComponent(SongTitleLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SongTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(YearBillboardLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(YearBillboardText, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(PositionBillboardLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PositionBillboardText, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(FeaturesArtistsLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FeaturesArtistsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                                    .addComponent(UpdateStatisticsButton))))
                        .addContainerGap())))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(ArtistsViewLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ArtistsViewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(DebutYearViewLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DebutYearViewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(CountryViewLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CountryViewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(StateViewLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StateViewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ArtistsViewButton)
                            .addComponent(DebutYearViewButton)
                            .addComponent(CountryViewButton)
                            .addComponent(StateViewButton)))
                    .addComponent(CSVScrollPane))
//                .addComponent(ResultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                    .addComponent(QuerySubmitButton)
//                    .addComponent(QueryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExportButton)
                    .addComponent(ImportButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SongTitleLabel)
                    .addComponent(SongTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(YearBillboardLabel)
                    .addComponent(YearBillboardText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PositionBillboardLabel)
                    .addComponent(PositionBillboardText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FeaturesArtistsLabel)
                    .addComponent(FeaturesArtistsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                		.addComponent(ArtistNameLabel)
                        .addComponent(ArtistNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ArtistDebutYearLabel)
                        .addComponent(ArtistDebutYearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ArtistGroupLabel)
                        .addComponent(ArtistGroupCheckBox)
                        .addComponent(ArtistStateLabel)
                        .addComponent(ArtistStateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ArtistCountryLabel)
                        .addComponent(ArtistCountryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SizeSongLabel)
                    .addComponent(SizeSongText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LengthSongLabel)
                    .addComponent(LengthSongText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddEntryButton)
                    .addComponent(UpdateStatisticsButton))
                .addContainerGap())
        );

        TablesTabs.addTab("Main", MainPanel);

        SongsTable.setModel(new javax.swing.table.DefaultTableModel(dao.readDatabaseTable(Constants.songTableName),
        songHeaders));
        SongsTable.setColumnSelectionAllowed(false);
        SongsScrollPane.setViewportView(SongsTable);
        SongsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        PercentFeaturingMultipleArtistsLabel.setText("Percent of Songs Featuring Multiple Artists:");
        
        PercentFeaturingMultipleArtistsText.setEditable(false);
        PercentFeaturingMultipleArtistsText.setText(""+stat.percentSongsFeaturing);
        PercentFeaturingMultipleArtistsText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PercentFeaturingMultipleArtistsTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SongsPanelLayout = new javax.swing.GroupLayout(SongsPanel);
        SongsPanel.setLayout(SongsPanelLayout);
        SongsPanelLayout.setHorizontalGroup(
            SongsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SongsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SongsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SongsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
                    .addGroup(SongsPanelLayout.createSequentialGroup()
                        .addComponent(PercentFeaturingMultipleArtistsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PercentFeaturingMultipleArtistsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(550, 550 , 550)
                        .addComponent(DeleteSongButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        
                    		))
                
                        .addContainerGap())
        );
        SongsPanelLayout.setVerticalGroup(
            SongsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SongsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SongsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SongsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PercentFeaturingMultipleArtistsLabel)
                    .addComponent(PercentFeaturingMultipleArtistsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteSongButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)

                		)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TablesTabs.addTab("Songs", SongsPanel);

        ArtistsTable.setModel(new javax.swing.table.DefaultTableModel(dao.readDatabaseTable(Constants.artistTableName),
        artistHeaders));
        ArtistsTable.setColumnSelectionAllowed(false);
        
        ArtistsScrollPane.setViewportView(ArtistsTable);
        ArtistsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        PercentArtistsGroupText.setEditable(false);
        PercentArtistsGroupText.setText(""+stat.percentArtistsGroup);
        PercentArtistsGroupText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PercentArtistsGroupTextActionPerformed(evt);
            }
        });

        PercentArtistGroupLabel.setText("Percent of Artists that is a Group:");

        javax.swing.GroupLayout ArtistsPanelLayout = new javax.swing.GroupLayout(ArtistsPanel);
        ArtistsPanel.setLayout(ArtistsPanelLayout);
        ArtistsPanelLayout.setHorizontalGroup(
            ArtistsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArtistsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ArtistsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ArtistsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
                    .addGroup(ArtistsPanelLayout.createSequentialGroup()
                        .addComponent(PercentArtistGroupLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PercentArtistsGroupText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(600, 600 , 600)
                        .addComponent(DeleteArtistButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    		))
                .addContainerGap())
        );
        ArtistsPanelLayout.setVerticalGroup(
            ArtistsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArtistsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArtistsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ArtistsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PercentArtistGroupLabel)
                    .addComponent(PercentArtistsGroupText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteArtistButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)

                		)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TablesTabs.addTab("Artists", ArtistsPanel);

        FilesTable.setModel(new javax.swing.table.DefaultTableModel(dao.readDatabaseTable(Constants.fileTableName),
            fileHeaders));
        FilesTable.setColumnSelectionAllowed(false);
        FilesScrollPane.setViewportView(FilesTable);
        FilesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        AverageSizeFilesText.setEditable(false);
        AverageSizeFilesText.setText(""+stat.averageFileSize);
        AverageSizeFilesText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AverageSizeFilesTextActionPerformed(evt);
            }
        });

        AverageSizeFilesLabel.setText("Average Size of Files in Bytes:");

        AverageLengthFilesText.setEditable(false);
        AverageLengthFilesText.setText(""+stat.averageLengthFiles);
        AverageLengthFilesText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AverageLengthFilesTextActionPerformed(evt);
            }
        });

        AverageLengthFilesLabel.setText("Average Length of Files in Seconds:");

        javax.swing.GroupLayout FilesPanelLayout = new javax.swing.GroupLayout(FilesPanel);
        FilesPanel.setLayout(FilesPanelLayout);
        FilesPanelLayout.setHorizontalGroup(
            FilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FilesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
                    .addGroup(FilesPanelLayout.createSequentialGroup()
                        .addComponent(AverageSizeFilesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AverageSizeFilesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AverageLengthFilesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AverageLengthFilesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(400, 400 , 400)
                        .addComponent(DeleteFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    	))
                .addContainerGap())
        );
        FilesPanelLayout.setVerticalGroup(
            FilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FilesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(FilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AverageSizeFilesLabel)
                    .addComponent(AverageSizeFilesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AverageLengthFilesLabel)
                    .addComponent(AverageLengthFilesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TablesTabs.addTab("Files", FilesPanel);

        SongArtistTable.setModel(new javax.swing.table.DefaultTableModel(dao.readDatabaseTable(Constants.songArtistTableName),
        songArtistHeaders));
        SongArtistTable.setColumnSelectionAllowed(false);
        SongArtistScrollPane.setViewportView(SongArtistTable);
        SongArtistTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout SongArtistPanelLayout = new javax.swing.GroupLayout(SongArtistPanel);
        SongArtistPanel.setLayout(SongArtistPanelLayout);
        SongArtistPanelLayout.setHorizontalGroup(
            SongArtistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SongArtistPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SongArtistScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
                .addContainerGap())
        );
        SongArtistPanelLayout.setVerticalGroup(
            SongArtistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SongArtistPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SongArtistScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        TablesTabs.addTab("Song-Artist", SongArtistPanel);

        SongFileTable.setModel(new javax.swing.table.DefaultTableModel(dao.readDatabaseTable(Constants.songFileTableName),
        		songFileHeaders));
        SongFileTable.setColumnSelectionAllowed(false);
        SongFileScrollPane.setViewportView(SongFileTable);
        SongFileTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout SongFilePanelLayout = new javax.swing.GroupLayout(SongFilePanel);
        SongFilePanel.setLayout(SongFilePanelLayout);
        SongFilePanelLayout.setHorizontalGroup(
            SongFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1026, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SongFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SongFileScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
                .addContainerGap())
        );
        SongFilePanelLayout.setVerticalGroup(
            SongFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 543, Short.MAX_VALUE)
            .addGroup(SongFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SongFileScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        TablesTabs.addTab("Song-File", SongFilePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TablesTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 1031, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TablesTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void QuerySubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuerySubmitButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_QuerySubmitButtonActionPerformed

private void SongTitleTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SongTitleTextActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_SongTitleTextActionPerformed


private void DeleteSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SongTitleTextActionPerformed
	// TODO add your handling code here:
	if (-1 == SongsTable.getSelectedRow())
		return;
	Vector songRow = (Vector)((DefaultTableModel)SongsTable.getModel()).getDataVector().elementAt(SongsTable.getSelectedRow());
	Song s = new Song((Integer)songRow.get(2), (Integer)songRow.get(1), (String)songRow.get(0), Boolean.getBoolean((String)songRow.get(3)));
	dao.deleteSong(s);
	updateTables();
	
	}//GEN-LAST:event_SongTitleTextActionPerformed

private void DeleteArtistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SongTitleTextActionPerformed
	// TODO add your handling code here:

	if (-1 == ArtistsTable.getSelectedRow())
		return;
	Vector artistRow = (Vector)((DefaultTableModel)ArtistsTable.getModel()).getDataVector().elementAt(ArtistsTable.getSelectedRow());
	Artist a = new Artist((String)artistRow.get(0), Boolean.parseBoolean((String)artistRow.get(2)),
			(Integer)artistRow.get(1), (String)artistRow.get(3), (String)artistRow.get(4));
	dao.deleteArtist(a);
	updateTables();
	}//GEN-LAST:event_SongTitleTextActionPerformed

private void DeleteFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SongTitleTextActionPerformed
	// TODO add your handling code here:
//    String [] fileHeaders = new String [] {"Size in Bytes", "Length in Seconds", "Description Artist-Song-Year"};
//size length description
	
	if (-1 == FilesTable.getSelectedRow())
		return;
	Vector fileRow = (Vector)((DefaultTableModel)FilesTable.getModel()).getDataVector().elementAt(FilesTable.getSelectedRow());
	MusicFile f = new MusicFile((Integer)fileRow.get(0), (Integer)fileRow.get(1), (String)fileRow.get(2));
	dao.deleteFile(f);
	updateTables();
	}//GEN-LAST:event_SongTitleTextActionPerformed

private void AddEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddEntryButtonActionPerformed
// TODO add your handling code here:
	
	if (SongTitleText.getText().isEmpty() || SongTitleText.getText().contains("\"") || SongTitleText.getText().contains(",")|| SongTitleText.getText().contains("'"))
		return;
	if (YearBillboardText.getText().isEmpty() || YearBillboardText.getText().contains("\"") || YearBillboardText.getText().contains(",")|| SongTitleText.getText().contains("'"))
		return;
	if (PositionBillboardText.getText().isEmpty() || PositionBillboardText.getText().contains("\"") || PositionBillboardText.getText().contains(",")|| SongTitleText.getText().contains("'"))
		return;
	if (ArtistNameText.getText().isEmpty() || ArtistNameText.getText().contains("\"") || ArtistNameText.getText().contains(",")|| SongTitleText.getText().contains("'"))
		return;
	if (ArtistDebutYearText.getText().isEmpty() || ArtistDebutYearText.getText().contains("\"") || ArtistDebutYearText.getText().contains(",")|| SongTitleText.getText().contains("'"))
		return;
	if (ArtistCountryText.getText().isEmpty() || ArtistCountryText.getText().contains("\"") || ArtistCountryText.getText().contains(",")|| SongTitleText.getText().contains("'"))
		return;
	if (SizeSongText.getText().isEmpty() || SizeSongText.getText().contains("\"") || SizeSongText.getText().contains(",")|| SongTitleText.getText().contains("'"))
		return;
	if (LengthSongText.getText().isEmpty() || LengthSongText.getText().contains("\"") || LengthSongText.getText().contains(",")|| SongTitleText.getText().contains("'"))
		return;
	
	
	dao.addSong(SongTitleText.getText(), Integer.parseInt(YearBillboardText.getText()), Integer.parseInt(PositionBillboardText.getText()), 
			FeaturesArtistsCheckBox.isSelected(), ArtistNameText.getText(), Integer.parseInt(ArtistDebutYearText.getText()),
			ArtistGroupCheckBox.isSelected(), ArtistStateText.getText(), ArtistCountryText.getText(), Integer.parseInt(SizeSongText.getText()),
			Integer.parseInt(LengthSongText.getText()));
	updateTables();
}//GEN-LAST:event_AddEntryButtonActionPerformed

private void PercentFeaturingMultipleArtistsTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PercentFeaturingMultipleArtistsTextActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_PercentFeaturingMultipleArtistsTextActionPerformed

private void ImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
// TODO add your handling code here:
	dao.populateDatabase();
	updateTables();
}//GEN-LAST:event_ImportButtonActionPerformed

private void ExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
	// TODO add your handling code here:
		parse.writeThisFile("output.csv");
	}//GEN-LAST:event_ImportButtonActionPerformed



private void ArtistsViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
	// TODO add your handling code here:
	if (-1 == ArtistsViewList.getSelectedIndex())
		return;
	String s = "";
	ArrayList <String> al = view.showSongsbyArtist((String)artistNameListModel.get(ArtistsViewList.getSelectedIndex()));
	for (int i = 0; i< al.size(); i++)
		s = s+al.get(i)+"\n";
	updateCSV(s);
}//GEN-LAST:event_ImportButtonActionPerformed

private void DebutYearViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
	// TODO add your handling code here:
	if (-1 == DebutYearViewList.getSelectedIndex())
		return;
	String s = "";
	ArrayList <String> al = view.showArtistbyYear(Integer.parseInt((String)artistDebutYearListModel.get(DebutYearViewList.getSelectedIndex())));
	for (int i = 0; i< al.size(); i++)
		s = s+al.get(i)+"\n";
	updateCSV(s);
	}//GEN-LAST:event_ImportButtonActionPerformed

private void CountryViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
	// TODO add your handling code here:
	if (-1 == CountryViewList.getSelectedIndex())
		return;
	String s = "";
	ArrayList <String> al = view.showArtistbyCountry((String)artistCountryListModel.get(CountryViewList.getSelectedIndex()));
	for (int i = 0; i< al.size(); i++)
		s = s+al.get(i)+"\n";
	updateCSV(s);
	}//GEN-LAST:event_ImportButtonActionPerformed

private void StateViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
	// TODO add your handling code here:
	if (-1 == StateViewList.getSelectedIndex())
		return;
	String s = "";
	ArrayList <String> al = view.showArtistbyState((String)artistStateListModel.get(StateViewList.getSelectedIndex()));
	for (int i = 0; i< al.size(); i++)
		s = s+al.get(i)+"\n";
	updateCSV(s);
	}//GEN-LAST:event_ImportButtonActionPerformed

private void UpdateStatisticsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
	// TODO add your handling code here:
	stat.updateStatistics();
	PercentArtistsGroupText.setText(""+stat.percentArtistsGroup);
	PercentFeaturingMultipleArtistsText.setText(""+stat.percentSongsFeaturing);
	AverageSizeFilesText.setText(""+stat.averageFileSize);
	AverageLengthFilesText.setText(""+stat.averageLengthFiles);
	PercentArtistsGroupText.repaint();
	PercentFeaturingMultipleArtistsText.repaint();
	AverageSizeFilesText.repaint();
	AverageLengthFilesText.repaint();
	}

private void PercentArtistsGroupTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PercentArtistsGroupTextActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_PercentArtistsGroupTextActionPerformed

private void AverageSizeFilesTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AverageSizeFilesTextActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_AverageSizeFilesTextActionPerformed

private void AverageLengthFilesTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AverageLengthFilesTextActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_AverageLengthFilesTextActionPerformed

	public void updateCSV(String text){
		CSVTextArea.setText(text);
		CSVTextArea.repaint();
	}

	public void updateTables(){
		ArrayList <Artist> artistArrayList = artistDAO.parseFromDatabase();
        ArrayList <String> artistNameArrayList = new ArrayList <String> ();
        ArrayList <String> artistDebutYearArrayList = new ArrayList <String> ();
        ArrayList <String> artistCountryArrayList = new ArrayList <String> ();
        ArrayList <String> artistStateArrayList = new ArrayList <String> ();
        for (int i = 0; i < artistArrayList.size(); i++){
        	artistNameArrayList.add(artistArrayList.get(i).name);
        	artistDebutYearArrayList.add(""+artistArrayList.get(i).debutYear);
        	artistCountryArrayList.add(artistArrayList.get(i).country);
        	artistStateArrayList.add(artistArrayList.get(i).state);
        }
        
        HashSet artistDebutYearHash = new HashSet();
        artistDebutYearHash.addAll(artistDebutYearArrayList);
        artistDebutYearArrayList.clear();
        artistDebutYearArrayList.addAll(artistDebutYearHash);
        HashSet artistCountryHash = new HashSet();
        artistCountryHash.addAll(artistCountryArrayList);
        artistCountryArrayList.clear();
        artistCountryArrayList.addAll(artistCountryHash);
        HashSet artistStateHash = new HashSet();
        artistStateHash.addAll(artistStateArrayList);
        artistStateArrayList.clear();
        artistStateArrayList.addAll(artistStateHash);
        
        artistNameListModel.clear();
        artistDebutYearListModel.clear();
        artistCountryListModel.clear();
        artistStateListModel.clear();
        

        for (int i=0; i<artistNameArrayList.size(); i++)
        	artistNameListModel.addElement(artistNameArrayList.get(i));
        for (int i=0; i<artistDebutYearArrayList.size(); i++)
        	artistDebutYearListModel.addElement(artistDebutYearArrayList.get(i));
        for (int i=0; i<artistCountryArrayList.size(); i++)
        	artistCountryListModel.addElement(artistCountryArrayList.get(i));
        for (int i=0; i<artistStateArrayList.size(); i++)
        	artistStateListModel.addElement(artistStateArrayList.get(i));
		((DefaultTableModel)ArtistsTable.getModel()).setDataVector(dao.readDatabaseTable(Constants.artistTableName),artistHeaders);
		((DefaultTableModel)SongsTable.getModel()).setDataVector(dao.readDatabaseTable(Constants.songTableName),songHeaders);
		((DefaultTableModel)FilesTable.getModel()).setDataVector(dao.readDatabaseTable(Constants.fileTableName),fileHeaders);
		((DefaultTableModel)SongArtistTable.getModel()).setDataVector(dao.readDatabaseTable(Constants.songArtistTableName),songArtistHeaders);
		((DefaultTableModel)SongFileTable.getModel()).setDataVector(dao.readDatabaseTable(Constants.songFileTableName),songFileHeaders);
		
         // 2. add usage for buttons and text field
         // 3. import export
		
         ArtistsViewList.repaint();
         DebutYearViewList.repaint();
         CountryViewList.repaint();
         StateViewList.repaint();
		ArtistsTable.repaint();
		SongsTable.repaint();
		FilesTable.repaint();
		SongArtistTable.repaint();
		SongFileTable.repaint();
	}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabaseProjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabaseProjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabaseProjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabaseProjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DatabaseProjectGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton DeleteSongButton;
    private JButton DeleteArtistButton;
    private JButton DeleteFileButton;
    private javax.swing.JButton AddEntryButton;
    private javax.swing.JLabel ArtistDebutYearLabel;
    private javax.swing.JTextField ArtistDebutYearText;
    private javax.swing.JCheckBox ArtistGroupCheckBox;
    private javax.swing.JLabel ArtistStateLabel;
    private javax.swing.JTextField ArtistStateText;
    private javax.swing.JLabel ArtistCountryLabel;
    private javax.swing.JTextField ArtistCountryText;
    private javax.swing.JLabel ArtistGroupLabel;
    private javax.swing.JLabel ArtistNameLabel;
    private javax.swing.JTextField ArtistNameText;
    private javax.swing.JPanel ArtistsPanel;
    private javax.swing.JScrollPane ArtistsScrollPane;
    private javax.swing.JTable ArtistsTable;
    private javax.swing.JLabel AverageLengthFilesLabel;
    private javax.swing.JTextField AverageLengthFilesText;
    private javax.swing.JLabel AverageSizeFilesLabel;
    private javax.swing.JTextField AverageSizeFilesText;
    private javax.swing.JButton ExportButton;
    private javax.swing.JCheckBox FeaturesArtistsCheckBox;
    private javax.swing.JLabel FeaturesArtistsLabel;
    private javax.swing.JPanel FilesPanel;
    private javax.swing.JScrollPane FilesScrollPane;
    private javax.swing.JTable FilesTable;
    private javax.swing.JButton ImportButton;
    private javax.swing.JLabel LengthSongLabel;
    private javax.swing.JTextField LengthSongText;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JLabel PercentArtistGroupLabel;
    private javax.swing.JTextField PercentArtistsGroupText;
    private javax.swing.JLabel PercentFeaturingMultipleArtistsLabel;
    private javax.swing.JTextField PercentFeaturingMultipleArtistsText;
    private javax.swing.JLabel PositionBillboardLabel;
    private javax.swing.JTextField PositionBillboardText;
    private javax.swing.JScrollPane QueryScrollPane;
    private javax.swing.JButton QuerySubmitButton;
    private javax.swing.JTextArea QueryText;
    private javax.swing.JScrollPane ResultsScrollPane;
    private javax.swing.JTable ResultsTable;
    private javax.swing.JLabel SizeSongLabel;
    private javax.swing.JTextField SizeSongText;
    private javax.swing.JPanel SongArtistPanel;
    private javax.swing.JScrollPane SongArtistScrollPane;
    private javax.swing.JTable SongArtistTable;
    private javax.swing.JPanel SongFilePanel;
    private javax.swing.JScrollPane SongFileScrollPane;
    private javax.swing.JTable SongFileTable;
    private javax.swing.JLabel SongTitleLabel;
    private javax.swing.JTextField SongTitleText;
    private javax.swing.JPanel SongsPanel;
    private javax.swing.JScrollPane SongsScrollPane;
    private javax.swing.JTable SongsTable;
    private javax.swing.JTabbedPane TablesTabs;
    private javax.swing.JButton UpdateStatisticsButton;
    private javax.swing.JLabel YearBillboardLabel;
    private javax.swing.JTextField YearBillboardText;
    private javax.swing.JButton ArtistsViewButton;
    private javax.swing.JLabel ArtistsViewLabel;
    private javax.swing.JList ArtistsViewList;
    private javax.swing.JScrollPane ArtistsViewScrollPane;
    private javax.swing.JScrollPane CSVScrollPane;
    private javax.swing.JTextArea CSVTextArea;
    private javax.swing.JButton CountryViewButton;
    private javax.swing.JLabel CountryViewLabel;
    private javax.swing.JList CountryViewList;
    private javax.swing.JScrollPane CountryViewScrollPane;
    private javax.swing.JButton DebutYearViewButton;
    private javax.swing.JLabel DebutYearViewLabel;
    private javax.swing.JList DebutYearViewList;
    private javax.swing.JScrollPane DebutYearViewScrollPane;
    private javax.swing.JButton StateViewButton;
    private javax.swing.JLabel StateViewLabel;
    private javax.swing.JList StateViewList;
    private javax.swing.JScrollPane StateViewScrollPane;
    DefaultListModel artistNameListModel = new DefaultListModel();
    DefaultListModel artistDebutYearListModel = new DefaultListModel();
    DefaultListModel artistCountryListModel = new DefaultListModel();
    DefaultListModel artistStateListModel = new DefaultListModel();
    // End of variables declaration//GEN-END:variables
}
